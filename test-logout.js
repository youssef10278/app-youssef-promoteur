// Test du syst√®me de d√©connexion
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testLogout() {
  log('\nüîê TEST DU SYST√àME DE D√âCONNEXION', 'blue');
  log('=====================================\n', 'blue');

  let authToken = null;

  try {
    // Test 1: Connexion
    log('1. Test de connexion...', 'yellow');
    const loginResponse = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });

    const loginData = await loginResponse.json();
    
    if (loginResponse.ok && loginData.success) {
      authToken = loginData.data.token;
      log('‚úÖ Connexion r√©ussie', 'green');
      log(`   Token: ${authToken.substring(0, 20)}...`, 'green');
    } else {
      log('‚ùå √âchec de la connexion', 'red');
      log(`   Erreur: ${loginData.error || 'Erreur inconnue'}`, 'red');
      return;
    }

    // Test 2: V√©rification du token
    log('\n2. V√©rification du token...', 'yellow');
    const verifyResponse = await fetch(`${API_BASE}/auth/verify`, {
      headers: { 
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });

    const verifyData = await verifyResponse.json();
    
    if (verifyResponse.ok && verifyData.success) {
      log('‚úÖ Token valide', 'green');
      log(`   Utilisateur: ${verifyData.data.user.nom}`, 'green');
    } else {
      log('‚ùå Token invalide', 'red');
      return;
    }

    // Test 3: D√©connexion
    log('\n3. Test de d√©connexion...', 'yellow');
    const logoutResponse = await fetch(`${API_BASE}/auth/logout`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });

    const logoutData = await logoutResponse.json();
    
    if (logoutResponse.ok && logoutData.success) {
      log('‚úÖ D√©connexion c√¥t√© serveur r√©ussie', 'green');
    } else {
      log('‚ùå √âchec de la d√©connexion c√¥t√© serveur', 'red');
      log(`   Erreur: ${logoutData.error || 'Erreur inconnue'}`, 'red');
    }

    // Test 4: V√©rification apr√®s d√©connexion
    log('\n4. V√©rification apr√®s d√©connexion...', 'yellow');
    const verifyAfterResponse = await fetch(`${API_BASE}/auth/verify`, {
      headers: { 
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });

    const verifyAfterData = await verifyAfterResponse.json();
    
    if (verifyAfterResponse.ok && verifyAfterData.success) {
      log('‚ö†Ô∏è  Token encore valide apr√®s d√©connexion', 'yellow');
      log('   Note: C\'est normal avec JWT, le token reste valide jusqu\'√† expiration', 'yellow');
    } else {
      log('‚úÖ Token invalid√© apr√®s d√©connexion', 'green');
    }

    log('\nüéâ R√âSUM√â DU TEST', 'blue');
    log('================', 'blue');
    log('‚úÖ Connexion: OK', 'green');
    log('‚úÖ V√©rification token: OK', 'green');
    log('‚úÖ D√©connexion serveur: OK', 'green');
    log('‚úÖ Le syst√®me de d√©connexion fonctionne correctement', 'green');
    
    log('\nüí° INSTRUCTIONS POUR LE FRONTEND:', 'blue');
    log('1. Appeler apiClient.logout()', 'blue');
    log('2. Le token sera supprim√© du localStorage', 'blue');
    log('3. L\'utilisateur sera redirig√© vers /auth', 'blue');

  } catch (error) {
    log(`‚ùå Erreur lors du test: ${error.message}`, 'red');
  }
}

// Ex√©cuter le test
testLogout();
