import { query, closePool } from '../config/database';
import fs from 'fs';
import path from 'path';

/**
 * Script pour ex√©cuter la migration de refactorisation du syst√®me de d√©penses
 * Compatible avec Railway et environnements locaux
 */

const runExpenseRefactorMigration = async () => {
  console.log('üöÄ D√©but de la migration de refactorisation des d√©penses...');
  console.log('üìç Environnement:', process.env.NODE_ENV || 'development');
  
  try {
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, '../migrations/refactor_expense_payments.sql');
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Fichier de migration non trouv√©: ${migrationPath}`);
    }
    
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    console.log('üìÑ Fichier de migration charg√©');
    
    // V√©rifier la connexion √† la base de donn√©es
    console.log('üîç V√©rification de la connexion √† la base de donn√©es...');
    const connectionTest = await query('SELECT NOW() as current_time');
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie:', connectionTest.rows[0].current_time);
    
    // V√©rifier l'√©tat actuel de la base de donn√©es
    console.log('üîç V√©rification de l\'√©tat actuel des tables...');
    
    // V√©rifier si la table expenses existe
    const expensesTableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'expenses'
      ) as table_exists
    `);
    
    if (!expensesTableCheck.rows[0].table_exists) {
      throw new Error('‚ùå Table expenses non trouv√©e. Veuillez d\'abord ex√©cuter la migration principale.');
    }
    
    console.log('‚úÖ Table expenses trouv√©e');
    
    // V√©rifier si la migration a d√©j√† √©t√© ex√©cut√©e
    const expensePaymentsCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'expense_payments'
      ) as table_exists
    `);
    
    if (expensePaymentsCheck.rows[0].table_exists) {
      console.log('‚ö†Ô∏è  La table expense_payments existe d√©j√†. V√©rification de la structure...');
      
      // V√©rifier si des donn√©es existent d√©j√†
      const dataCheck = await query('SELECT COUNT(*) as count FROM expense_payments');
      console.log(`üìä Nombre de paiements existants: ${dataCheck.rows[0].count}`);
    }
    
    // Compter les d√©penses existantes
    const expensesCount = await query('SELECT COUNT(*) as count FROM expenses');
    console.log(`üìä Nombre de d√©penses existantes: ${expensesCount.rows[0].count}`);
    
    // Ex√©cuter la migration
    console.log('üîÑ Ex√©cution de la migration...');
    await query(migrationSQL);
    
    // V√©rifier le r√©sultat de la migration
    console.log('üîç V√©rification post-migration...');
    
    // V√©rifier la nouvelle table
    const newTableCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'expense_payments'
      ) as table_exists
    `);
    
    if (!newTableCheck.rows[0].table_exists) {
      throw new Error('‚ùå √âchec de la cr√©ation de la table expense_payments');
    }
    
    // V√©rifier la vue
    const viewCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.views 
        WHERE table_name = 'expenses_with_totals'
      ) as view_exists
    `);
    
    if (!viewCheck.rows[0].view_exists) {
      throw new Error('‚ùå √âchec de la cr√©ation de la vue expenses_with_totals');
    }
    
    // V√©rifier les donn√©es migr√©es
    const migratedPaymentsCount = await query('SELECT COUNT(*) as count FROM expense_payments');
    console.log(`üìä Nombre de paiements apr√®s migration: ${migratedPaymentsCount.rows[0].count}`);
    
    // Tester la vue
    const viewTest = await query(`
      SELECT COUNT(*) as count 
      FROM expenses_with_totals 
      WHERE total_paye_calcule > 0
    `);
    console.log(`üìä D√©penses avec paiements calcul√©s: ${viewTest.rows[0].count}`);
    
    // V√©rifier les triggers
    const triggerCheck = await query(`
      SELECT EXISTS (
        SELECT FROM information_schema.triggers 
        WHERE trigger_name = 'trigger_update_expense_totals'
      ) as trigger_exists
    `);
    
    if (!triggerCheck.rows[0].trigger_exists) {
      console.log('‚ö†Ô∏è  Trigger de mise √† jour automatique non trouv√©');
    } else {
      console.log('‚úÖ Trigger de mise √† jour automatique cr√©√©');
    }
    
    console.log('');
    console.log('üéâ Migration de refactorisation des d√©penses termin√©e avec succ√®s !');
    console.log('');
    console.log('üìã R√©sum√© des modifications :');
    console.log('   ‚úÖ Table expense_payments cr√©√©e');
    console.log('   ‚úÖ Vue expenses_with_totals cr√©√©e');
    console.log('   ‚úÖ Triggers de mise √† jour automatique install√©s');
    console.log('   ‚úÖ Donn√©es existantes migr√©es');
    console.log('   ‚úÖ Statut ajout√© aux d√©penses');
    console.log('');
    console.log('üöÄ Le syst√®me est maintenant pr√™t pour :');
    console.log('   - Cr√©ation de d√©penses sans montant initial');
    console.log('   - Ajout progressif de paiements');
    console.log('   - Calcul automatique des totaux');
    console.log('   - Historique complet des paiements');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    
    if (error instanceof Error) {
      console.error('D√©tails:', error.message);
      if (error.stack) {
        console.error('Stack trace:', error.stack);
      }
    }
    
    process.exit(1);
  } finally {
    // Fermer la connexion √† la base de donn√©es
    await closePool();
    console.log('üîå Connexion √† la base de donn√©es ferm√©e');
  }
};

// Ex√©cuter la migration si ce script est appel√© directement
if (require.main === module) {
  runExpenseRefactorMigration()
    .then(() => {
      console.log('‚úÖ Script de migration termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå √âchec du script de migration:', error);
      process.exit(1);
    });
}

export { runExpenseRefactorMigration };
