/**
 * Script pour ex√©cuter la migration d'ajout des colonnes montant_declare et montant_non_declare
 * 
 * Usage:
 *   npm run migrate:declared-amounts
 *   ou
 *   ts-node src/scripts/run-migration.ts
 */

import { Pool } from 'pg';
import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Configuration de la base de donn√©es
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5433'),
  database: process.env.DB_NAME || 'promoteur_db',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
});

/**
 * Ex√©cute une requ√™te SQL
 */
async function query(text: string, params?: any[]) {
  const start = Date.now();
  try {
    const res = await pool.query(text, params);
    const duration = Date.now() - start;
    console.log('‚úÖ Requ√™te ex√©cut√©e', { duration: `${duration}ms`, rows: res.rowCount });
    return res;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution de la requ√™te:', error);
    throw error;
  }
}

/**
 * V√©rifie si les colonnes existent d√©j√†
 */
async function checkColumnsExist(): Promise<boolean> {
  try {
    const result = await query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'payment_plans' 
      AND column_name IN ('montant_declare', 'montant_non_declare')
    `);
    
    return result.rows.length === 2;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des colonnes:', error);
    return false;
  }
}

/**
 * Ex√©cute le script SQL de migration
 */
async function runMigration() {
  console.log('üöÄ D√©marrage de la migration...\n');

  try {
    // V√©rifier la connexion √† la base de donn√©es
    console.log('üì° Connexion √† la base de donn√©es...');
    await pool.query('SELECT NOW()');
    console.log('‚úÖ Connexion √©tablie\n');

    // V√©rifier si les colonnes existent d√©j√†
    console.log('üîç V√©rification de l\'√©tat actuel de la table...');
    const columnsExist = await checkColumnsExist();
    
    if (columnsExist) {
      console.log('‚ö†Ô∏è  Les colonnes montant_declare et montant_non_declare existent d√©j√†.');
      console.log('   Aucune migration n√©cessaire.\n');
      return;
    }

    console.log('üìù Les colonnes n\'existent pas encore. Migration n√©cessaire.\n');

    // Lire le fichier SQL de migration
    console.log('üìñ Lecture du fichier de migration...');
    const migrationPath = path.join(__dirname, 'add-declared-amounts-migration.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    console.log('‚úÖ Fichier de migration charg√©\n');

    // Ex√©cuter la migration
    console.log('‚öôÔ∏è  Ex√©cution de la migration...');
    await query(migrationSQL);
    console.log('‚úÖ Migration ex√©cut√©e avec succ√®s\n');

    // V√©rifier que les colonnes ont √©t√© ajout√©es
    console.log('üîç V√©rification post-migration...');
    const result = await query(`
      SELECT column_name, data_type, column_default, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'payment_plans' 
      AND column_name IN ('montant_declare', 'montant_non_declare')
      ORDER BY column_name
    `);

    if (result.rows.length === 2) {
      console.log('‚úÖ V√©rification r√©ussie. Colonnes ajout√©es:');
      result.rows.forEach(row => {
        console.log(`   - ${row.column_name}: ${row.data_type} (default: ${row.column_default}, nullable: ${row.is_nullable})`);
      });
    } else {
      console.error('‚ùå Erreur: Les colonnes n\'ont pas √©t√© ajout√©es correctement');
    }

    // Afficher un r√©sum√© des donn√©es
    console.log('\nüìä R√©sum√© des donn√©es dans payment_plans:');
    const summary = await query(`
      SELECT 
        COUNT(*) as total_plans,
        COUNT(montant_declare) as plans_with_declare,
        COUNT(montant_non_declare) as plans_with_non_declare,
        SUM(montant_declare) as total_declare,
        SUM(montant_non_declare) as total_non_declare
      FROM payment_plans
    `);

    if (summary.rows.length > 0) {
      const stats = summary.rows[0];
      console.log(`   Total de plans: ${stats.total_plans}`);
      console.log(`   Plans avec montant_declare: ${stats.plans_with_declare}`);
      console.log(`   Plans avec montant_non_declare: ${stats.plans_with_non_declare}`);
      console.log(`   Total d√©clar√©: ${stats.total_declare || 0} DH`);
      console.log(`   Total non d√©clar√©: ${stats.total_non_declare || 0} DH`);
    }

    console.log('\nüéâ Migration termin√©e avec succ√®s!');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la migration:', error);
    throw error;
  } finally {
    // Fermer la connexion
    await pool.end();
    console.log('\nüëã Connexion ferm√©e');
  }
}

// Ex√©cuter la migration
runMigration()
  .then(() => {
    console.log('\n‚úÖ Script termin√© avec succ√®s');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Script termin√© avec des erreurs:', error);
    process.exit(1);
  });

