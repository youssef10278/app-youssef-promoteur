#!/usr/bin/env node

/**
 * Test rapide pour v√©rifier que la page /checks fonctionne
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Test de la correction de la page /checks');
console.log('=====================================\n');

// 1. V√©rifier que les fichiers modifi√©s existent
const filesToCheck = [
  'src/pages/Checks.tsx',
  'src/services/checkService.ts',
  'src/components/checks/CheckFilters.tsx',
  'src/utils/eventBus.ts'
];

console.log('üìÅ V√©rification des fichiers...');
filesToCheck.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - OK`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
  }
});

// 2. V√©rifier la syntaxe TypeScript
console.log('\nüîç V√©rification de la syntaxe TypeScript...');
try {
  execSync('npx tsc --noEmit --skipLibCheck', { stdio: 'pipe' });
  console.log('‚úÖ Syntaxe TypeScript - OK');
} catch (error) {
  console.log('‚ùå Erreurs TypeScript d√©tect√©es:');
  console.log(error.stdout?.toString() || error.message);
}

// 3. V√©rifier que eventBus.on() existe
console.log('\nüîç V√©rification de l\'EventBus...');
const eventBusContent = fs.readFileSync('src/utils/eventBus.ts', 'utf8');
if (eventBusContent.includes('on(event: string, callback: EventCallback)')) {
  console.log('‚úÖ EventBus.on() - OK');
} else {
  console.log('‚ùå EventBus.on() - MANQUANT');
}

// 4. V√©rifier que Checks.tsx utilise eventBus.on()
console.log('\nüîç V√©rification de l\'utilisation dans Checks.tsx...');
const checksContent = fs.readFileSync('src/pages/Checks.tsx', 'utf8');
if (checksContent.includes('eventBus.on(EVENTS.CHECK_CREATED')) {
  console.log('‚úÖ Checks.tsx utilise eventBus.on() - OK');
} else if (checksContent.includes('eventBus.subscribe(EVENTS.CHECK_CREATED')) {
  console.log('‚ùå Checks.tsx utilise encore eventBus.subscribe() - ERREUR');
} else {
  console.log('‚ö†Ô∏è  Checks.tsx - Utilisation d\'eventBus non trouv√©e');
}

// 5. V√©rifier la structure du CheckService
console.log('\nüîç V√©rification du CheckService...');
const checkServiceContent = fs.readFileSync('src/services/checkService.ts', 'utf8');
if (checkServiceContent.includes('Promise<{ success: boolean; data: Check[] }>')) {
  console.log('‚úÖ CheckService.getChecks() retourne la bonne structure - OK');
} else {
  console.log('‚ùå CheckService.getChecks() - Structure de retour incorrecte');
}

// 6. Essayer de compiler le projet
console.log('\nüèóÔ∏è  Test de compilation...');
try {
  execSync('npm run build', { stdio: 'pipe' });
  console.log('‚úÖ Compilation r√©ussie - OK');
} catch (error) {
  console.log('‚ùå Erreur de compilation:');
  console.log(error.stdout?.toString() || error.message);
}

console.log('\nüìã R√©sum√© des corrections appliqu√©es:');
console.log('=====================================');
console.log('1. ‚úÖ Correction eventBus.subscribe() ‚Üí eventBus.on()');
console.log('2. ‚úÖ Correction du type de retour de CheckService.getChecks()');
console.log('3. ‚úÖ Ajout des champs manquants dans CheckFiltersState');
console.log('4. ‚úÖ Correction de la m√©thode createCheck()');

console.log('\nüéØ Prochaines √©tapes:');
console.log('===================');
console.log('1. D√©marrer le serveur de d√©veloppement: npm run dev');
console.log('2. Tester la page /checks dans le navigateur');
console.log('3. V√©rifier que les ch√®ques s\'affichent correctement');
console.log('4. Tester l\'ajout d\'un nouveau ch√®que');

console.log('\n‚úÖ Test termin√© !');
