const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3001/api';
const AUTH_TOKEN = 'YOUR_JWT_TOKEN_HERE'; // IMPORTANT: Replace with a valid token

const headers = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${AUTH_TOKEN}`
};

async function testChecksPage() {
  console.log('üß™ Test de la page des ch√®ques');
  console.log('=============================');

  try {
    // --- Test 1: R√©cup√©rer les projets ---
    console.log('\n--- Test 1: R√©cup√©ration des projets ---');
    const projectsResponse = await fetch(`${API_BASE_URL}/projects`, { headers });
    const projectsData = await projectsResponse.json();

    if (projectsData.success) {
      console.log('‚úÖ Projets r√©cup√©r√©s avec succ√®s');
      console.log(`   Nombre de projets: ${projectsData.data.length}`);
      if (projectsData.data.length > 0) {
        console.log(`   Premier projet: "${projectsData.data[0].nom}" (ID: ${projectsData.data[0].id})`);
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des projets');
      return;
    }

    // --- Test 2: R√©cup√©rer les ch√®ques ---
    console.log('\n--- Test 2: R√©cup√©ration des ch√®ques ---');
    const checksResponse = await fetch(`${API_BASE_URL}/checks`, { headers });
    const checksData = await checksResponse.json();

    if (checksData.success) {
      console.log('‚úÖ Ch√®ques r√©cup√©r√©s avec succ√®s');
      console.log(`   Nombre de ch√®ques: ${checksData.data.length}`);
      
      if (checksData.data.length > 0) {
        const firstCheck = checksData.data[0];
        console.log('   Premier ch√®que:');
        console.log(`     - ID: ${firstCheck.id}`);
        console.log(`     - Type: ${firstCheck.type_cheque}`);
        console.log(`     - Montant: ${firstCheck.montant} DH`);
        console.log(`     - Projet: ${firstCheck.project_nom || 'Aucun'}`);
        console.log(`     - Statut: ${firstCheck.statut}`);
      }
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des ch√®ques');
      console.log('   D√©tails:', checksData);
    }

    // --- Test 3: R√©cup√©rer les ch√®ques d'un projet sp√©cifique ---
    if (projectsData.data.length > 0) {
      const projectId = projectsData.data[0].id;
      console.log(`\n--- Test 3: R√©cup√©ration des ch√®ques du projet "${projectsData.data[0].nom}" ---`);
      
      const projectChecksResponse = await fetch(`${API_BASE_URL}/checks?project_id=${projectId}`, { headers });
      const projectChecksData = await projectChecksResponse.json();

      if (projectChecksData.success) {
        console.log('‚úÖ Ch√®ques du projet r√©cup√©r√©s avec succ√®s');
        console.log(`   Nombre de ch√®ques pour ce projet: ${projectChecksData.data.length}`);
      } else {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des ch√®ques du projet');
        console.log('   D√©tails:', projectChecksData);
      }
    }

    // --- Test 4: Tester les filtres ---
    console.log('\n--- Test 4: Test des filtres ---');
    
    // Test filtre par type
    const recuChecksResponse = await fetch(`${API_BASE_URL}/checks?type=recu`, { headers });
    const recuChecksData = await recuChecksResponse.json();
    
    if (recuChecksData.success) {
      console.log(`‚úÖ Filtre par type "re√ßu": ${recuChecksData.data.length} ch√®ques`);
    } else {
      console.log('‚ùå Erreur avec le filtre par type "re√ßu"');
    }

    // Test filtre par statut
    const emisChecksResponse = await fetch(`${API_BASE_URL}/checks?statut=emis`, { headers });
    const emisChecksData = await emisChecksResponse.json();
    
    if (emisChecksData.success) {
      console.log(`‚úÖ Filtre par statut "√©mis": ${emisChecksData.data.length} ch√®ques`);
    } else {
      console.log('‚ùå Erreur avec le filtre par statut "√©mis"');
    }

    // --- Test 5: Cr√©er un ch√®que de test ---
    console.log('\n--- Test 5: Cr√©ation d\'un ch√®que de test ---');
    
    const testCheckData = {
      type_cheque: 'donne',
      montant: 1000,
      numero_cheque: 'TEST-' + Date.now(),
      nom_beneficiaire: 'Test B√©n√©ficiaire',
      nom_emetteur: 'Test √âmetteur',
      date_emission: new Date().toISOString().split('T')[0],
      description: 'Ch√®que de test automatique',
      statut: 'emis',
      facture_recue: false
    };

    const createCheckResponse = await fetch(`${API_BASE_URL}/checks`, {
      method: 'POST',
      headers,
      body: JSON.stringify(testCheckData)
    });

    const createCheckData = await createCheckResponse.json();

    if (createCheckData.success) {
      console.log('‚úÖ Ch√®que de test cr√©√© avec succ√®s');
      console.log(`   ID du ch√®que: ${createCheckData.data.id}`);
      
      // Supprimer le ch√®que de test
      const deleteResponse = await fetch(`${API_BASE_URL}/checks/${createCheckData.data.id}`, {
        method: 'DELETE',
        headers
      });
      
      if (deleteResponse.ok) {
        console.log('‚úÖ Ch√®que de test supprim√© avec succ√®s');
      } else {
        console.log('‚ö†Ô∏è Impossible de supprimer le ch√®que de test');
      }
    } else {
      console.log('‚ùå Erreur lors de la cr√©ation du ch√®que de test');
      console.log('   D√©tails:', createCheckData);
    }

    console.log('\nüéâ Tests de la page des ch√®ques termin√©s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
  }
}

// Instructions
console.log('üìã Instructions:');
console.log('1. Assurez-vous que le backend est d√©marr√© sur le port 3001');
console.log('2. Remplacez YOUR_JWT_TOKEN_HERE par un token valide');
console.log('3. Ex√©cutez: node test-checks-page.js');
console.log('');

if (process.argv.includes('--run')) {
  testChecksPage();
} else {
  console.log('Pour ex√©cuter les tests, utilisez: node test-checks-page.js --run');
}
