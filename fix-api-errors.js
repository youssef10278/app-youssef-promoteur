const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3001/api';
const DIAGNOSTIC_URL = 'http://localhost:3002';

async function testMainAPI() {
  console.log('üß™ Test de l\'API principale (port 3001)');
  console.log('=====================================');

  try {
    // Test de base
    const healthResponse = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ API principale accessible:', healthData);
    } else {
      console.log('‚ùå API principale inaccessible:', healthResponse.status);
      return;
    }

    // Test des routes probl√©matiques (sans authentification pour voir l'erreur)
    console.log('\nüîç Test des routes sans authentification:');
    
    try {
      const profileResponse = await fetch(`${API_BASE_URL}/auth/profile`);
      console.log(`   /auth/profile: ${profileResponse.status} ${profileResponse.statusText}`);
      if (!profileResponse.ok) {
        const errorData = await profileResponse.text();
        console.log(`   Erreur: ${errorData.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`   /auth/profile: Erreur de connexion - ${error.message}`);
    }

    try {
      const statsResponse = await fetch(`${API_BASE_URL}/projects/stats`);
      console.log(`   /projects/stats: ${statsResponse.status} ${statsResponse.statusText}`);
      if (!statsResponse.ok) {
        const errorData = await statsResponse.text();
        console.log(`   Erreur: ${errorData.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`   /projects/stats: Erreur de connexion - ${error.message}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'API principale:', error.message);
  }
}

async function testDiagnosticAPI() {
  console.log('\nüß™ Test de l\'API de diagnostic (port 3002)');
  console.log('==========================================');

  try {
    // Test de base
    const healthResponse = await fetch(`${DIAGNOSTIC_URL}/health`);
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ API de diagnostic accessible:', healthData);
    } else {
      console.log('‚ùå API de diagnostic inaccessible:', healthResponse.status);
      return;
    }

    // Test de connexion DB
    console.log('\nüîç Test de connexion √† la base de donn√©es:');
    const dbResponse = await fetch(`${DIAGNOSTIC_URL}/test-db`);
    if (dbResponse.ok) {
      const dbData = await dbResponse.json();
      console.log('‚úÖ Connexion DB:', dbData.message);
    } else {
      const dbError = await dbResponse.json();
      console.log('‚ùå Erreur DB:', dbError.message);
    }

    // Test des tables
    console.log('\nüîç Test des tables:');
    const tablesResponse = await fetch(`${DIAGNOSTIC_URL}/test-tables`);
    if (tablesResponse.ok) {
      const tablesData = await tablesResponse.json();
      console.log('‚úÖ Test des tables:');
      Object.entries(tablesData.data).forEach(([table, result]) => {
        if (result.success) {
          console.log(`   ‚úÖ ${table}: ${result.count} enregistrements`);
        } else {
          console.log(`   ‚ùå ${table}: ${result.error}`);
        }
      });
    } else {
      const tablesError = await tablesResponse.json();
      console.log('‚ùå Erreur test tables:', tablesError.message);
    }

    // Test des requ√™tes probl√©matiques
    console.log('\nüîç Test des requ√™tes probl√©matiques:');
    const queriesResponse = await fetch(`${DIAGNOSTIC_URL}/test-problematic-queries`);
    if (queriesResponse.ok) {
      const queriesData = await queriesResponse.json();
      console.log('‚úÖ Test des requ√™tes:');
      Object.entries(queriesData.data).forEach(([query, result]) => {
        if (result.success) {
          console.log(`   ‚úÖ ${query}: ${result.message}`);
        } else {
          console.log(`   ‚ùå ${query}: ${result.error}`);
        }
      });
    } else {
      const queriesError = await queriesResponse.json();
      console.log('‚ùå Erreur test requ√™tes:', queriesError.message);
    }

    // Test avec un vrai utilisateur
    console.log('\nüîç Test avec un utilisateur r√©el:');
    const realUserResponse = await fetch(`${DIAGNOSTIC_URL}/test-real-user`);
    if (realUserResponse.ok) {
      const realUserData = await realUserResponse.json();
      if (realUserData.success) {
        console.log('‚úÖ Test avec utilisateur r√©el:');
        console.log(`   Utilisateur ID: ${realUserData.userId}`);
        Object.entries(realUserData.data).forEach(([query, result]) => {
          if (result.success) {
            console.log(`   ‚úÖ ${query}: ${result.message}`);
          } else {
            console.log(`   ‚ùå ${query}: ${result.error}`);
          }
        });
      } else {
        console.log('‚ùå Aucun utilisateur trouv√© dans la base de donn√©es');
      }
    } else {
      const realUserError = await realUserResponse.json();
      console.log('‚ùå Erreur test utilisateur r√©el:', realUserError.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'API de diagnostic:', error.message);
  }
}

async function main() {
  console.log('üöÄ Diagnostic des erreurs API');
  console.log('=============================');
  
  console.log('\nüìã Instructions:');
  console.log('1. Assurez-vous que le backend principal est d√©marr√© sur le port 3001');
  console.log('2. D√©marrez l\'API de diagnostic: node backend/diagnostic-api.js');
  console.log('3. Ex√©cutez ce script: node fix-api-errors.js');
  console.log('');

  await testMainAPI();
  await testDiagnosticAPI();

  console.log('\nüìã R√©sum√© des actions recommand√©es:');
  console.log('1. V√©rifiez la configuration de la base de donn√©es dans backend/.env');
  console.log('2. Assurez-vous que PostgreSQL est d√©marr√© et accessible');
  console.log('3. V√©rifiez que les tables existent (ex√©cutez create-tables.sql si n√©cessaire)');
  console.log('4. Red√©marrez le backend principal apr√®s les corrections');
}

main().catch(console.error);
