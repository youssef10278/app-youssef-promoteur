import { Pool } from 'pg';

// Configuration de la base de donn√©es
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/promoteur_app'
});

async function testProjectValidation() {
  console.log('üß™ Test de validation des modifications de projet\n');

  try {
    // 1. Cr√©er un projet de test avec 20 appartements
    console.log('1Ô∏è‚É£ Cr√©ation d\'un projet de test avec 20 appartements...');
    const createProjectResult = await pool.query(
      `INSERT INTO projects (user_id, nom, localisation, societe, surface_totale, nombre_lots, nombre_appartements, nombre_garages, description)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
       RETURNING id, nom, nombre_appartements`,
      [1, 'Projet Test Validation', 'Casablanca', 'Test SARL', 5000, 50, 20, 10, 'Projet pour tester la validation']
    );
    
    const projectId = createProjectResult.rows[0].id;
    console.log(`‚úÖ Projet cr√©√©: ID ${projectId}, ${createProjectResult.rows[0].nombre_appartements} appartements`);

    // 2. Cr√©er des ventes pour 15 appartements
    console.log('\n2Ô∏è‚É£ Cr√©ation de 15 ventes d\'appartements...');
    const sales = [];
    for (let i = 1; i <= 15; i++) {
      const saleResult = await pool.query(
        `INSERT INTO sales (user_id, project_id, client_nom, client_telephone, client_email, type_unite, prix_total, avance_total, statut, date_vente)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
         RETURNING id`,
        [1, projectId, `Client ${i}`, `012345678${i}`, `client${i}@test.com`, 'appartement', 500000 + (i * 10000), 100000 + (i * 5000), 'en_cours', new Date()]
      );
      sales.push(saleResult.rows[0].id);
    }
    console.log(`‚úÖ ${sales.length} ventes cr√©√©es`);

    // 3. Tester la modification qui devrait √©chouer (r√©duire √† 2 appartements)
    console.log('\n3Ô∏è‚É£ Test de modification qui devrait √©chouer (r√©duire √† 2 appartements)...');
    try {
      await pool.query(
        'UPDATE projects SET nombre_appartements = $1 WHERE id = $2',
        [2, projectId]
      );
      console.log('‚ùå ERREUR: La modification aurait d√ª √©chouer !');
    } catch (error) {
      console.log('‚úÖ Validation fonctionne: Modification bloqu√©e');
      console.log(`   Message d'erreur: ${error.message}`);
    }

    // 4. Tester la modification qui devrait r√©ussir (augmenter √† 25 appartements)
    console.log('\n4Ô∏è‚É£ Test de modification qui devrait r√©ussir (augmenter √† 25 appartements)...');
    try {
      await pool.query(
        'UPDATE projects SET nombre_appartements = $1 WHERE id = $2',
        [25, projectId]
      );
      console.log('‚úÖ Modification r√©ussie: Augmentation autoris√©e');
    } catch (error) {
      console.log('‚ùå ERREUR: L\'augmentation aurait d√ª r√©ussir !');
      console.log(`   Message d'erreur: ${error.message}`);
    }

    // 5. Tester la modification qui devrait √©chouer (r√©duire √† 10 appartements)
    console.log('\n5Ô∏è‚É£ Test de modification qui devrait √©chouer (r√©duire √† 10 appartements)...');
    try {
      await pool.query(
        'UPDATE projects SET nombre_appartements = $1 WHERE id = $2',
        [10, projectId]
      );
      console.log('‚ùå ERREUR: La modification aurait d√ª √©chouer !');
    } catch (error) {
      console.log('‚úÖ Validation fonctionne: Modification bloqu√©e');
      console.log(`   Message d'erreur: ${error.message}`);
    }

    // 6. Nettoyer les donn√©es de test
    console.log('\n6Ô∏è‚É£ Nettoyage des donn√©es de test...');
    await pool.query('DELETE FROM sales WHERE project_id = $1', [projectId]);
    await pool.query('DELETE FROM projects WHERE id = $1', [projectId]);
    console.log('‚úÖ Donn√©es de test supprim√©es');

    console.log('\nüéâ Test de validation termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await pool.end();
  }
}

// Ex√©cuter le test
testProjectValidation();
