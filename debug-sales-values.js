// Script pour d√©boguer les valeurs des ventes
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function debugSalesValues() {
  try {
    log('\nüîç D√âBOGAGE DES VALEURS DES VENTES', 'blue');
    log('=====================================\n', 'blue');

    // 1. R√©cup√©rer toutes les ventes depuis la base de donn√©es
    log('1. R√©cup√©ration des ventes depuis la base de donn√©es...', 'yellow');
    
    const salesResponse = await fetch(`${API_BASE}/debug-data`);
    const debugData = await salesResponse.json();
    
    if (!debugData.success) {
      log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es debug', 'red');
      return;
    }

    // 2. Afficher les projets disponibles
    log('\nüìã PROJETS DISPONIBLES:', 'cyan');
    debugData.data.projects.forEach(project => {
      log(`  - ${project.nom} (ID: ${project.id})`, 'cyan');
    });

    // 3. R√©cup√©rer les ventes pour chaque projet
    for (const project of debugData.data.projects) {
      log(`\nüèóÔ∏è VENTES DU PROJET: ${project.nom}`, 'yellow');
      log('=' .repeat(50), 'yellow');
      
      try {
        // R√©cup√©rer les ventes du projet (sans authentification pour le debug)
        const projectSalesResponse = await fetch(`${API_BASE}/sales/project/${project.id}`);
        
        if (projectSalesResponse.status === 401) {
          log('‚ö†Ô∏è Authentification requise - utilisation de la route debug', 'yellow');
          continue;
        }
        
        const projectSalesData = await projectSalesResponse.json();
        
        if (projectSalesData.success && projectSalesData.data.length > 0) {
          projectSalesData.data.forEach((sale, index) => {
            log(`\n  üìä VENTE ${index + 1}:`, 'green');
            log(`    Client: ${sale.client_nom}`, 'green');
            log(`    Unit√©: ${sale.unite_numero}`, 'green');
            log(`    Prix total: ${sale.prix_total} DH`, 'green');
            log(`    Avance d√©clar√©e: ${sale.avance_declare || 0} DH`, 'green');
            log(`    Avance non d√©clar√©e: ${sale.avance_non_declare || 0} DH`, 'green');
            log(`    Avance ch√®que: ${sale.avance_cheque || 0} DH`, 'green');
            log(`    Avance esp√®ce: ${sale.avance_espece || 0} DH`, 'green');
            log(`    Avance totale (calcul√©e): ${(sale.avance_declare || 0) + (sale.avance_non_declare || 0)} DH`, 'green');
            log(`    Statut: ${sale.statut}`, 'green');
            log(`    Mode paiement: ${sale.mode_paiement}`, 'green');
            log(`    Date cr√©ation: ${sale.created_at}`, 'green');
          });
        } else {
          log('  ‚ÑπÔ∏è Aucune vente trouv√©e pour ce projet', 'cyan');
        }
      } catch (error) {
        log(`  ‚ùå Erreur lors de la r√©cup√©ration des ventes: ${error.message}`, 'red');
      }
    }

    // 4. Test direct de la base de donn√©es via une requ√™te SQL
    log('\nüóÑÔ∏è TEST DIRECT BASE DE DONN√âES:', 'blue');
    log('=' .repeat(40), 'blue');
    
    try {
      const dbTestResponse = await fetch(`${API_BASE}/debug-data`);
      const dbTestData = await dbTestResponse.json();
      
      // Simuler une requ√™te SQL pour les ventes (√† ajouter dans le backend)
      log('  ‚ö†Ô∏è Pour un test complet, ajouter une route debug pour les ventes dans le backend', 'yellow');
      
    } catch (error) {
      log(`  ‚ùå Erreur test DB: ${error.message}`, 'red');
    }

    log('\n‚úÖ D√©bogage termin√©', 'green');
    
  } catch (error) {
    log(`‚ùå Erreur g√©n√©rale: ${error.message}`, 'red');
    console.error(error);
  }
}

// Ex√©cuter le d√©bogage
debugSalesValues();
