// Test direct de la base de donn√©es pour les ventes
import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3001/api';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function formatAmount(amount) {
  return new Intl.NumberFormat('fr-MA', {
    style: 'currency',
    currency: 'MAD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  }).format(amount).replace('MAD', 'DH');
}

async function testSalesDatabase() {
  try {
    log('\nüîç TEST COMPLET DES VENTES - BASE DE DONN√âES', 'blue');
    log('=' .repeat(60), 'blue');

    // 1. R√©cup√©rer toutes les donn√©es debug
    log('\n1. R√©cup√©ration des donn√©es debug...', 'yellow');
    const debugResponse = await fetch(`${API_BASE}/debug-data`);
    const debugData = await debugResponse.json();
    
    if (!debugData.success) {
      log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es debug', 'red');
      return;
    }

    // 2. Afficher les ventes trouv√©es
    log('\nüìä VENTES TROUV√âES DANS LA BASE:', 'cyan');
    log('=' .repeat(40), 'cyan');
    
    if (debugData.data.sales && debugData.data.sales.length > 0) {
      debugData.data.sales.forEach((sale, index) => {
        log(`\n  üè† VENTE ${index + 1}:`, 'green');
        log(`    ID: ${sale.id}`, 'green');
        log(`    Client: ${sale.client_nom}`, 'green');
        log(`    Unit√©: ${sale.unite_numero}`, 'green');
        log(`    Projet: ${sale.project_nom}`, 'green');
        log(`    Type: ${sale.type_propriete}`, 'green');
        log(`    Surface: ${sale.surface}m¬≤`, 'green');
        
        // VALEURS CRITIQUES - C'est ici que le probl√®me peut √™tre
        log(`    üí∞ PRIX TOTAL: ${formatAmount(parseFloat(sale.prix_total))}`, 'magenta');
        log(`    üíµ AVANCE D√âCLAR√âE: ${formatAmount(parseFloat(sale.avance_declare || 0))}`, 'magenta');
        log(`    üí¥ AVANCE NON D√âCLAR√âE: ${formatAmount(parseFloat(sale.avance_non_declare || 0))}`, 'magenta');
        log(`    üè¶ AVANCE CH√àQUE: ${formatAmount(parseFloat(sale.avance_cheque || 0))}`, 'magenta');
        log(`    üí∏ AVANCE ESP√àCE: ${formatAmount(parseFloat(sale.avance_espece || 0))}`, 'magenta');
        
        // Calculs comme dans le frontend
        const initialAdvance = (parseFloat(sale.avance_declare || 0)) + (parseFloat(sale.avance_non_declare || 0));
        log(`    ‚úÖ AVANCE TOTALE (calcul√©e): ${formatAmount(initialAdvance)}`, 'magenta');
        
        log(`    üìÖ Mode paiement: ${sale.mode_paiement}`, 'green');
        log(`    üìä Statut: ${sale.statut}`, 'green');
        log(`    üìÖ Cr√©√© le: ${new Date(sale.created_at).toLocaleDateString('fr-FR')}`, 'green');
        
        // Types de donn√©es brutes
        log(`    üîç TYPES DE DONN√âES:`, 'yellow');
        log(`      - prix_total: ${typeof sale.prix_total} (${sale.prix_total})`, 'yellow');
        log(`      - avance_declare: ${typeof sale.avance_declare} (${sale.avance_declare})`, 'yellow');
        log(`      - avance_non_declare: ${typeof sale.avance_non_declare} (${sale.avance_non_declare})`, 'yellow');
        log(`      - avance_cheque: ${typeof sale.avance_cheque} (${sale.avance_cheque})`, 'yellow');
        log(`      - avance_espece: ${typeof sale.avance_espece} (${sale.avance_espece})`, 'yellow');
      });
    } else {
      log('  ‚ÑπÔ∏è Aucune vente trouv√©e dans la base de donn√©es', 'cyan');
    }

    // 3. Afficher les plans de paiement
    log('\nüí≥ PLANS DE PAIEMENT TROUV√âS:', 'cyan');
    log('=' .repeat(40), 'cyan');
    
    if (debugData.data.payment_plans && debugData.data.payment_plans.length > 0) {
      debugData.data.payment_plans.forEach((plan, index) => {
        log(`\n  üìã PLAN ${index + 1}:`, 'green');
        log(`    ID: ${plan.id}`, 'green');
        log(`    Vente: ${plan.client_nom} - ${plan.unite_numero}`, 'green');
        log(`    Projet: ${plan.project_nom}`, 'green');
        log(`    √âch√©ance N¬∞: ${plan.numero_echeance}`, 'green');
        log(`    üí∞ Montant pr√©vu: ${formatAmount(parseFloat(plan.montant_prevu || 0))}`, 'magenta');
        log(`    üíµ Montant pay√©: ${formatAmount(parseFloat(plan.montant_paye || 0))}`, 'magenta');
        log(`    üí∏ Montant esp√®ce: ${formatAmount(parseFloat(plan.montant_espece || 0))}`, 'magenta');
        log(`    üè¶ Montant ch√®que: ${formatAmount(parseFloat(plan.montant_cheque || 0))}`, 'magenta');
        log(`    üìÖ Date pr√©vue: ${new Date(plan.date_prevue).toLocaleDateString('fr-FR')}`, 'green');
        log(`    üìä Statut: ${plan.statut}`, 'green');
        
        if (plan.date_paiement) {
          log(`    ‚úÖ Pay√© le: ${new Date(plan.date_paiement).toLocaleDateString('fr-FR')}`, 'green');
        }
      });
    } else {
      log('  ‚ÑπÔ∏è Aucun plan de paiement trouv√©', 'cyan');
    }

    // 4. Simulation du calcul frontend
    log('\nüßÆ SIMULATION CALCUL FRONTEND:', 'blue');
    log('=' .repeat(40), 'blue');
    
    if (debugData.data.sales && debugData.data.sales.length > 0) {
      debugData.data.sales.forEach((sale, index) => {
        log(`\n  üî¢ CALCUL POUR VENTE ${index + 1} (${sale.client_nom}):`, 'yellow');
        
        // Reproduire exactement le calcul du frontend
        const initialAdvance = (parseFloat(sale.avance_declare || 0)) + (parseFloat(sale.avance_non_declare || 0));
        
        // Trouver les plans de paiement pour cette vente
        const salePaymentPlans = debugData.data.payment_plans?.filter(plan => plan.sale_id === sale.id) || [];
        const additionalPayments = salePaymentPlans.reduce((sum, plan) => sum + (parseFloat(plan.montant_paye || 0)), 0);
        
        const totalPaid = initialAdvance + additionalPayments;
        const totalDue = parseFloat(sale.prix_total);
        const percentage = totalDue > 0 ? (totalPaid / totalDue) * 100 : 0;
        
        log(`    üìä Avance initiale: ${formatAmount(initialAdvance)}`, 'cyan');
        log(`    üìä Paiements suppl√©mentaires: ${formatAmount(additionalPayments)}`, 'cyan');
        log(`    üìä Total pay√©: ${formatAmount(totalPaid)}`, 'cyan');
        log(`    üìä Total d√ª: ${formatAmount(totalDue)}`, 'cyan');
        log(`    üìä Pourcentage: ${percentage.toFixed(1)}%`, 'cyan');
        log(`    üìä Montant restant: ${formatAmount(totalDue - totalPaid)}`, 'cyan');
        
        // V√©rifier s'il y a des incoh√©rences
        if (totalPaid > totalDue) {
          log(`    ‚ö†Ô∏è PROBL√àME: Total pay√© > Total d√ª !`, 'red');
        }
        
        if (initialAdvance !== (parseFloat(sale.avance_cheque || 0) + parseFloat(sale.avance_espece || 0))) {
          log(`    ‚ö†Ô∏è INCOH√âRENCE: Avance totale ‚â† Ch√®que + Esp√®ce`, 'red');
          log(`      Avance totale: ${formatAmount(initialAdvance)}`, 'red');
          log(`      Ch√®que + Esp√®ce: ${formatAmount(parseFloat(sale.avance_cheque || 0) + parseFloat(sale.avance_espece || 0))}`, 'red');
        }
      });
    }

    log('\n‚úÖ Test termin√©', 'green');
    
  } catch (error) {
    log(`‚ùå Erreur: ${error.message}`, 'red');
    console.error(error);
  }
}

// Ex√©cuter le test
testSalesDatabase();
