import { apiClient } from '../integrations/api/client';

// Types pour les op√©rations de donn√©es
export type DataType = 'global' | 'projects' | 'sales' | 'expenses' | 'checks' | 'payments';
export type OperationType = 'export' | 'import';
export type OperationStatus = 'pending' | 'completed' | 'failed';
export type DuplicateStrategy = 'ignore' | 'replace' | 'create_new';
export type ExportFormat = 'json' | 'csv';

export interface DataOperation {
  id: string;
  user_id: string;
  operation_type: OperationType;
  data_type: DataType;
  file_name?: string;
  file_size?: number;
  records_count?: number;
  status: OperationStatus;
  error_message?: string;
  created_at: string;
  updated_at: string;
}

export interface ValidationResponse {
  valid: boolean;
  records_count: number;
  errors: string[];
  warnings: string[];
  sample_data?: any[];
}

export interface ImportResponse {
  success: boolean;
  operation_id: string;
  records_imported: number;
  records_skipped: number;
  records_failed: number;
  errors: string[];
}

export interface ExportResponse {
  success: boolean;
  operation_id: string;
  download_url: string;
  records_count: number;
  file_size: number;
}

// Utilitaire pour convertir un fichier en base64
function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      // Enlever le pr√©fixe "data:type/subtype;base64,"
      const base64 = result.split(',')[1];
      resolve(base64);
    };
    reader.onerror = error => reject(error);
  });
}

export class DataOperationsService {
  /**
   * Valider un fichier d'import
   */
  static async validateImport(file: File, dataType: DataType): Promise<ValidationResponse> {
    try {
      console.log('üîç validateImport appel√© avec:', {
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        dataType
      });

      // Convertir le fichier en base64
      const fileContent = await fileToBase64(file);

      console.log('üì§ Fichier converti en base64, taille:', fileContent.length);

      // Envoyer la requ√™te avec le contenu base64
      const response = await apiClient.post('/data/validate', {
        file_content: fileContent,
        file_name: file.name,
        data_type: dataType
      });

      console.log('‚úÖ R√©ponse compl√®te validation:', response.data);

      // V√©rifier la structure de la r√©ponse
      if (!response.data || !response.data.data) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse validation inattendue:', response.data);
        return {
          valid: false,
          records_count: 0,
          errors: ['Structure de r√©ponse invalide'],
          warnings: []
        };
      }

      const validationData = response.data.data;
      console.log('‚úÖ Donn√©es validation extraites:', validationData);

      // V√©rifier que les propri√©t√©s existent
      if (typeof validationData.valid === 'undefined') {
        console.warn('‚ö†Ô∏è Propri√©t√© valid manquante:', validationData);
        return {
          valid: false,
          records_count: validationData.records_count || 0,
          errors: validationData.errors || ['Validation √©chou√©e'],
          warnings: validationData.warnings || []
        };
      }

      return validationData;
    } catch (error) {
      console.error('‚ùå Erreur lors de la validation:', error);
      // Retourner une structure d'erreur plut√¥t que de throw
      return {
        valid: false,
        records_count: 0,
        errors: [`Erreur de validation: ${(error as Error).message}`],
        warnings: []
      };
    }
  }

  /**
   * Importer des donn√©es
   */
  static async importData(
    file: File, 
    dataType: DataType, 
    duplicateStrategy: DuplicateStrategy = 'ignore'
  ): Promise<ImportResponse> {
    try {
      console.log('üì• importData appel√© avec:', {
        fileName: file.name,
        fileSize: file.size,
        dataType,
        duplicateStrategy
      });

      // Convertir le fichier en base64
      const fileContent = await fileToBase64(file);
      
      console.log('üì§ Fichier converti en base64, envoi de l\'import...');

      // Envoyer la requ√™te d'import
      const response = await apiClient.post('/data/import', {
        file_content: fileContent,
        file_name: file.name,
        data_type: dataType,
        duplicate_strategy: duplicateStrategy
      });

      console.log('‚úÖ R√©ponse compl√®te import:', response.data);

      // V√©rifier la structure de la r√©ponse
      if (!response.data || !response.data.data) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse import inattendue:', response.data);
        throw new Error('Structure de r√©ponse invalide');
      }

      const importData = response.data.data;
      console.log('‚úÖ Donn√©es import extraites:', importData);

      return importData;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'import:', error);
      throw error;
    }
  }

  /**
   * Export global de toutes les donn√©es
   */
  static async exportGlobal(format: ExportFormat = 'json'): Promise<ExportResponse> {
    try {
      console.log('üì§ Export global demand√©, format:', format);

      const response = await apiClient.post('/data/export', {
        data_types: ['projects', 'sales', 'expenses', 'checks', 'payments'],
        format,
        include_metadata: true
      });
      
      console.log('‚úÖ R√©ponse compl√®te export global:', response.data);

      // V√©rifier la structure de la r√©ponse
      if (!response.data || !response.data.data) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse export inattendue:', response.data);
        throw new Error('Structure de r√©ponse invalide');
      }

      const exportData = response.data.data;
      console.log('‚úÖ Donn√©es export extraites:', exportData);

      return exportData;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'export global:', error);
      throw error;
    }
  }

  /**
   * Export s√©lectif par types de donn√©es
   */
  static async exportSelective(
    dataTypes: DataType[], 
    format: ExportFormat = 'csv'
  ): Promise<ExportResponse> {
    try {
      console.log('üì§ Export s√©lectif demand√©:', { dataTypes, format });

      const response = await apiClient.post('/data/export', {
        data_types: dataTypes,
        format,
        include_metadata: false
      });
      
      console.log('‚úÖ R√©ponse compl√®te export s√©lectif:', response.data);

      // V√©rifier la structure de la r√©ponse
      if (!response.data || !response.data.data) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse export s√©lectif inattendue:', response.data);
        throw new Error('Structure de r√©ponse invalide');
      }

      const exportData = response.data.data;
      console.log('‚úÖ Donn√©es export s√©lectif extraites:', exportData);

      return exportData;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'export s√©lectif:', error);
      throw error;
    }
  }

  /**
   * T√©l√©charger un fichier d'export
   */
  static async downloadExport(operationId: string): Promise<void> {
    try {
      console.log('‚¨áÔ∏è T√©l√©chargement demand√© pour:', operationId);

      // Utiliser window.open pour d√©clencher le t√©l√©chargement
      const downloadUrl = `${apiClient.defaults.baseURL}/data/download/${operationId}`;
      window.open(downloadUrl, '_blank');
      
      console.log('‚úÖ T√©l√©chargement initi√©');
    } catch (error) {
      console.error('‚ùå Erreur lors du t√©l√©chargement:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer l'historique des op√©rations
   */
  static async getOperations(page: number = 1, limit: number = 20): Promise<{
    operations: DataOperation[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      pages: number;
    };
  }> {
    try {
      console.log('üìã R√©cup√©ration historique:', { page, limit });

      const response = await apiClient.get('/data/operations', {
        params: { page, limit }
      });

      console.log('‚úÖ R√©ponse compl√®te:', response.data);

      // V√©rifier la structure de la r√©ponse
      if (!response.data || !response.data.data) {
        console.warn('‚ö†Ô∏è Structure de r√©ponse inattendue:', response.data);
        return {
          operations: [],
          pagination: {
            page: Number(page),
            limit: Number(limit),
            total: 0,
            pages: 0
          }
        };
      }

      const data = response.data.data;
      console.log('‚úÖ Donn√©es extraites:', data);

      // V√©rifier que les op√©rations existent
      if (!data.operations) {
        console.warn('‚ö†Ô∏è Pas d\'op√©rations dans la r√©ponse:', data);
        return {
          operations: [],
          pagination: data.pagination || {
            page: Number(page),
            limit: Number(limit),
            total: 0,
            pages: 0
          }
        };
      }

      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'historique:', error);
      // Retourner une structure vide plut√¥t que de throw
      return {
        operations: [],
        pagination: {
          page: Number(page),
          limit: Number(limit),
          total: 0,
          pages: 0
        }
      };
    }
  }

  /**
   * R√©cup√©rer les statistiques des op√©rations
   */
  static async getStats(): Promise<any[]> {
    try {
      console.log('üìä R√©cup√©ration statistiques');

      const response = await apiClient.get('/data/stats');

      console.log('‚úÖ Statistiques r√©cup√©r√©es:', response.data.data);
      return response.data.data.statistics;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      throw error;
    }
  }

  /**
   * Test de la base de donn√©es (debug)
   */
  static async testDatabase(): Promise<any> {
    try {
      console.log('üß™ Test de la base de donn√©es');

      const response = await apiClient.get('/data/test-db');

      console.log('‚úÖ Test DB termin√©:', response.data.data);
      return response.data.data;
    } catch (error) {
      console.error('‚ùå Erreur lors du test DB:', error);
      throw error;
    }
  }
}
